---
# Source: testserver/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-testserver
  labels:
    helm.sh/chart: testserver-1.0.1
    app.kubernetes.io/name: testserver
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: testserver/templates/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  annotations:
    "helm.sh/resource-policy": keep
  name: "instance-data"
  labels:
    helm.sh/chart: testserver-1.0.1
    app.kubernetes.io/name: testserver
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  accessModes:
    - "ReadWriteMany"
  resources:
    requests:
      storage: "250Mi"
  storageClassName: "longhorn"
---
# Source: testserver/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-testserver
  labels:
    helm.sh/chart: testserver-1.0.1
    app.kubernetes.io/name: testserver
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 8080
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: testserver
    app.kubernetes.io/instance: release-name
---
# Source: testserver/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-testserver
  labels:
    helm.sh/chart: testserver-1.0.1
    app.kubernetes.io/name: testserver
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: testserver
      app.kubernetes.io/instance: release-name
  revisionHistoryLimit: 2
  template:
    metadata:
      labels:
        app.kubernetes.io/name: testserver
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: release-name-testserver
      securityContext:
        {}

      containers:
        - name: testserver
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
          image: "cgerull/testserver:1.0.0"
          imagePullPolicy: IfNotPresent

          env:
            - name: VERSION
              value: 1.0.0
            - name: SECRET_KEY
              value: PiHelmChartSecret
            - name: ENV
              value: pi-cluster
          ports:
            - containerPort: 8080
              name: http
              protocol: TCP
          volumeMounts:
            - name: instance
              mountPath: /home/web/instance
          livenessProbe:
            httpGet:
              path: /health
              port: http

          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 20m
              memory: 72Mi
      volumes:
        - name: instance
          persistentVolumeClaim:
            claimName: instance-data
---
# Source: testserver/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: release-name-testserver
  labels:
    helm.sh/chart: testserver-1.0.1
    app.kubernetes.io/name: testserver
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    traefik.ingress.kubernetes.io/router.middlewares: testserver-testserver-stripprefix@kubernetescrd
spec:
  ingressClassName: traefik
  rules:
    - host: "testserver.dieren.gerull.nl"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: release-name-testserver
                port:
                  number: 80
