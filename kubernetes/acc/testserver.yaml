---
# Source: testserver/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: testserver
  labels:
    helm.sh/chart: testserver-0.2.0
    app.kubernetes.io/name: testserver
    app.kubernetes.io/instance: testserver
    app.kubernetes.io/version: "0.9.3"
    app.kubernetes.io/managed-by: Helm
---
# Source: testserver/templates/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  annotations:
    "helm.sh/resource-policy": keep
  name: "testserver"
  labels:
    helm.sh/chart: testserver-0.2.0
    app.kubernetes.io/name: testserver
    app.kubernetes.io/instance: testserver
    app.kubernetes.io/version: "0.9.3"
    app.kubernetes.io/managed-by: Helm
spec:
  accessModes:
    - "ReadWriteMany"
  resources:
    requests:
      storage: "1Gi"
  storageClassName: "trident-nfs-n00"
---
# Source: testserver/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: testserver
  labels:
    helm.sh/chart: testserver-0.2.0
    app.kubernetes.io/name: testserver
    app.kubernetes.io/instance: testserver
    app.kubernetes.io/version: "0.9.3"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 8080
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: testserver
    app.kubernetes.io/instance: testserver
---
# Source: testserver/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: testserver
  labels:
    helm.sh/chart: testserver-0.2.0
    app.kubernetes.io/name: testserver
    app.kubernetes.io/instance: testserver
    app.kubernetes.io/version: "0.9.3"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: testserver
      app.kubernetes.io/instance: testserver
  template:
    metadata:
      labels:
        app.kubernetes.io/name: testserver
        app.kubernetes.io/instance: testserver
    spec:
      serviceAccountName: testserver
      securityContext:
        {}
      containers:
        - name: testserver
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
          image: "cgerull/testserver:0.9.3"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          env:
            - name: SECRET_KEY
              value: TestAccHelmChartSecret
            - name: FLASK_ENV
              value: Acc
          livenessProbe:
            httpGet:
              path: /health
              port: http
          readinessProbe:
            httpGet:
              path: /health
              port: http
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 50m
              memory: 48Mi
---
# Source: testserver/templates/database.yaml
apiVersion: "sharedservices.solvinity.com/v1"
kind: Database
metadata:
  name: testserver
spec:
  driver: postgresql
  prefix: namespace
  secret_store: kubernetes
  remove: true
